/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>



###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)                                          \
        .globl name;            /* define global symbol for 'name' */   \
        .type name, @function;  /* symbol type is function */           \
        .align 2;               /* align function definition */         \
        name:                   /* function starts here */              \
        pushl $(num);                                                   \
        jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)                                     \
        .globl name;                                                    \
        .type name, @function;                                          \
        .align 2;                                                       \
        name:                                                           \
        pushl $0;                                                       \
        pushl $(num);                                                   \
        jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
  TRAPHANDLER(DIVIDE, T_DIVIDE)
  TRAPHANDLER(DEBUG, T_DEBUG)
  TRAPHANDLER(NMI, T_NMI)
  TRAPHANDLER(BRKPT, T_BRKPT)
  TRAPHANDLER(OFLOW, T_OFLOW)
  TRAPHANDLER(BOUND, T_BOUND)
  TRAPHANDLER(ILLOP, T_ILLOP)
  TRAPHANDLER(DEVICE, T_DEVICE)
  TRAPHANDLER(DBLFLT, T_DBLFLT)
  TRAPHANDLER(TSS, T_TSS)
  TRAPHANDLER(SEGNP, T_SEGNP)
  TRAPHANDLER(STACK, T_STACK)
  TRAPHANDLER(GPFLT, T_GPFLT)
  TRAPHANDLER(PGFLT, T_PGFLT)
  TRAPHANDLER(FPERR, T_FPERR)
  TRAPHANDLER(ALIGN, T_ALIGN)
  TRAPHANDLER(MCHK, T_MCHK)
  TRAPHANDLER(SIMDERR, T_SIMDERR)

/*
 * Lab 3: Your code here for _alltraps
 */
 .globl _alltraps
 _alltraps:
  pushl %ds
  pushl %es
  pushl %fs
  pushl %gs
  pushal

  movw GD_KD, %ds
  movw GD_KD, %es
 
  pushl %esp
  call trap

